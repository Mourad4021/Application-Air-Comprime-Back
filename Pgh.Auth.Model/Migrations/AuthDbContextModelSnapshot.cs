// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pgh.Auth.Model.Models;

namespace Pgh.Auth.Model.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    partial class AuthDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffApplicationUsers", b =>
                {
                    b.Property<Guid>("AppId");

                    b.Property<Guid>("UsersId");

                    b.Property<string>("Password");

                    b.HasKey("AppId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AffApplicationUsers");
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffGroupUsers", b =>
                {
                    b.Property<Guid>("GrpId");

                    b.Property<Guid>("UsersId");

                    b.HasKey("GrpId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AffGroupUsers");
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffRoleGroupMenus", b =>
                {
                    b.Property<Guid>("GrpId");

                    b.Property<Guid>("MenuId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("GrpId", "MenuId", "RoleId");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("AffRoleGroupMenus");
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffRolePermissions", b =>
                {
                    b.Property<Guid>("PermId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("PermId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AffRolePermissions");
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffRolesUsersMenus", b =>
                {
                    b.Property<Guid>("UsersId");

                    b.Property<Guid>("MenuId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UsersId", "MenuId", "RoleId");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("AffRolesUsersMenus");
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Applications", b =>
                {
                    b.Property<Guid>("AppId");

                    b.Property<string>("AppCode");

                    b.Property<string>("AppDescription");

                    b.Property<string>("AppDisplayName");

                    b.Property<string>("AppName");

                    b.Property<bool>("AppState");

                    b.HasKey("AppId");

                    b.HasIndex("AppCode")
                        .IsUnique()
                        .HasFilter("([AppCode] IS NOT NULL)");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            AppId = new Guid("7d84faba-eb47-4861-bfa3-816c9d341a15"),
                            AppCode = "0000",
                            AppDescription = "Cette application gérer l'authentification et des permissions des différents applications.",
                            AppDisplayName = "Gestion de l'authentification  des applications",
                            AppName = "AuthApp",
                            AppState = true
                        },
                        new
                        {
                            AppId = new Guid("006097eb-0fa8-46a3-9e21-fd5c1c61a22b"),
                            AppCode = "0001",
                            AppDescription = "Cette application gérer le processus d'analyse des échantillons par le labo Dick.",
                            AppDisplayName = "Gestion de laboratoire Dick",
                            AppName = "LaboDickAgro",
                            AppState = true
                        },
                        new
                        {
                            AppId = new Guid("5d5c79a2-e823-4a40-be1b-ecb54aa5f0a8"),
                            AppCode = "0013",
                            AppDescription = "Mise a jour de l'ancienne application Laboratoir Dick.",
                            AppDisplayName = "Gestion de laboratoire Dick Elevage",
                            AppName = "LaboDickElevage",
                            AppState = true
                        });
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Filiale", b =>
                {
                    b.Property<Guid>("FilialeID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<string>("Conformite_d_Exploitation");

                    b.Property<string>("Nom");

                    b.HasKey("FilialeID");

                    b.ToTable("Filiale");
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Groupes", b =>
                {
                    b.Property<Guid>("GrpId");

                    b.Property<Guid?>("FkAppId");

                    b.Property<string>("GrpDescription");

                    b.Property<string>("GrpDisplayName");

                    b.Property<string>("GrpName");

                    b.Property<bool>("GrpState");

                    b.HasKey("GrpId");

                    b.HasIndex("FkAppId");

                    b.ToTable("Groupes");

                    b.HasData(
                        new
                        {
                            GrpId = new Guid("04b68613-032c-439b-9b4f-e803eb6a7f4e"),
                            FkAppId = new Guid("7d84faba-eb47-4861-bfa3-816c9d341a15"),
                            GrpDescription = "Administration Groupe for Authentication Application",
                            GrpDisplayName = "Administration Groupes",
                            GrpName = "AdministratorAuth",
                            GrpState = true
                        },
                        new
                        {
                            GrpId = new Guid("a5007005-07a5-4c03-9c18-73f318dda7e4"),
                            FkAppId = new Guid("7d84faba-eb47-4861-bfa3-816c9d341a15"),
                            GrpDescription = "Readers Groupe for Authentication Application",
                            GrpDisplayName = "Readers Groupes",
                            GrpName = "ReadersAuth",
                            GrpState = true
                        },
                        new
                        {
                            GrpId = new Guid("fffdbf85-6e87-4de3-8790-4fba3a028e55"),
                            FkAppId = new Guid("7d84faba-eb47-4861-bfa3-816c9d341a15"),
                            GrpDescription = "Editors Groupe for Authentication Application",
                            GrpDisplayName = "Editors Groupes",
                            GrpName = "EditorsAuth",
                            GrpState = true
                        });
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Menus", b =>
                {
                    b.Property<Guid>("MenuId");

                    b.Property<Guid?>("FkAppId");

                    b.Property<Guid?>("FkMenuId");

                    b.Property<string>("MenuDescription");

                    b.Property<string>("MenuDisplayName");

                    b.Property<string>("MenuName");

                    b.Property<bool>("MenuState");

                    b.Property<string>("MenuUrl");

                    b.HasKey("MenuId");

                    b.HasIndex("FkAppId");

                    b.HasIndex("FkMenuId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuId = new Guid("0c568f77-29e0-4a76-9278-13247f439a9e"),
                            FkAppId = new Guid("7d84faba-eb47-4861-bfa3-816c9d341a15"),
                            MenuDescription = "User setup menu.",
                            MenuDisplayName = "Users",
                            MenuName = "AuthUsers",
                            MenuState = true,
                            MenuUrl = "Http://srvapp/authusers"
                        },
                        new
                        {
                            MenuId = new Guid("45228d92-9b57-49c6-b1e1-6273f910937c"),
                            FkAppId = new Guid("7d84faba-eb47-4861-bfa3-816c9d341a15"),
                            MenuDescription = "Permissions setup menu.",
                            MenuDisplayName = "Permissions",
                            MenuName = "AuthPermissions",
                            MenuState = true,
                            MenuUrl = "Http://srvapp/authpermissions"
                        },
                        new
                        {
                            MenuId = new Guid("54348b0f-3f5a-4ece-b1fb-d960715ad129"),
                            FkAppId = new Guid("7d84faba-eb47-4861-bfa3-816c9d341a15"),
                            MenuDescription = "Roles setup menu.",
                            MenuDisplayName = "Roles",
                            MenuName = "AuthRoles",
                            MenuState = true,
                            MenuUrl = "Http://srvapp/authroles"
                        },
                        new
                        {
                            MenuId = new Guid("81064b62-7721-42aa-8bf0-67117bd0ca0f"),
                            FkAppId = new Guid("7d84faba-eb47-4861-bfa3-816c9d341a15"),
                            MenuDescription = "Applications setup menu.",
                            MenuDisplayName = "Applications",
                            MenuName = "AuthApplications",
                            MenuState = true,
                            MenuUrl = "Http://srvapp/authappications"
                        },
                        new
                        {
                            MenuId = new Guid("675314af-212c-4cc7-9f7f-1f91c3e3369a"),
                            FkAppId = new Guid("7d84faba-eb47-4861-bfa3-816c9d341a15"),
                            MenuDescription = "Menus setup menu.",
                            MenuDisplayName = "Menus",
                            MenuName = "AuthMenus",
                            MenuState = true,
                            MenuUrl = "Http://srvapp/authmenus"
                        },
                        new
                        {
                            MenuId = new Guid("e5f2b4f0-c976-47d3-97fe-870964ff3531"),
                            FkAppId = new Guid("7d84faba-eb47-4861-bfa3-816c9d341a15"),
                            MenuDescription = "Groupes setup menu.",
                            MenuDisplayName = "Groupes",
                            MenuName = "AuthGroupes",
                            MenuState = true,
                            MenuUrl = "Http://srvapp/authgroupes"
                        });
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Permissions", b =>
                {
                    b.Property<Guid>("PermId");

                    b.Property<string>("PermDescription");

                    b.Property<string>("PermDisplayName");

                    b.Property<string>("PermName");

                    b.Property<bool>("PermState");

                    b.HasKey("PermId");

                    b.HasIndex("PermName")
                        .IsUnique()
                        .HasFilter("([PermName] IS NOT NULL)");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermId = new Guid("5b30a049-0ed6-4e65-a571-db958ba2979b"),
                            PermDescription = "Users Will Have the permission to add items",
                            PermDisplayName = "Add Items",
                            PermName = "AddItems",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("5ac089b5-2c81-496c-bfa7-64b440d5209f"),
                            PermDescription = "Users Will Have Permission to edit Items.",
                            PermDisplayName = "Edit Items",
                            PermName = "EditItems",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("66eac8ff-df76-4864-85af-1e45777f88fc"),
                            PermDescription = "Users Will Have Permission to delete Elements.",
                            PermDisplayName = "Delete Items",
                            PermName = "DeleteItems",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("0972105b-0624-4b70-8134-106927670252"),
                            PermDescription = "Users Will Have Permission to View Items.",
                            PermDisplayName = "View Items",
                            PermName = "ViewItems",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("d69dc2b1-fe23-492b-a9f7-f0f8cd919663"),
                            PermDescription = "Users Will Have Permission to approve items.",
                            PermDisplayName = "Approve Items",
                            PermName = "ApproveItems",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("c8ce40d9-ab3a-43b5-96cf-e337799b6749"),
                            PermDescription = "Users Will Have Permission to show versions.",
                            PermDisplayName = "Show Versions",
                            PermName = "ShowVersions",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("1243ca02-d628-462e-8749-d84edb2afdc0"),
                            PermDescription = "Users Will Have Permission to Delete versions.",
                            PermDisplayName = "Delete Versions",
                            PermName = "DeleteVersions",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("371a6c85-c6e0-4107-85fb-8d82346911ee"),
                            PermDescription = "Users Will Have Permission to view application pages.",
                            PermDisplayName = "View application pages",
                            PermName = "ViewApplicationPages",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("f0943f92-ce16-4b33-9726-d1188373ba3f"),
                            PermDescription = "Users Will Have Permission to create groups.",
                            PermDisplayName = "Create Groups",
                            PermName = "CreateGroups",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("fa548165-aa7e-4893-a62e-d229637dcc96"),
                            PermDescription = "Users Will Have Permission to view pages.",
                            PermDisplayName = "View Pages",
                            PermName = "ViewPages",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("a2d317d2-22e1-408a-8462-f42c985f0212"),
                            PermDescription = "Users Will Have Permission to edit users personal information.",
                            PermDisplayName = "Edit user's personal information",
                            PermName = "EditUserPersonalInformation",
                            PermState = true
                        },
                        new
                        {
                            PermId = new Guid("386c1a06-5e41-4687-90ae-3c9fc745061b"),
                            PermDescription = "Users Will Have Permission to Manage personal views.",
                            PermDisplayName = "Manage personal views",
                            PermName = "ManagePersonalViews",
                            PermState = true
                        });
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Roles", b =>
                {
                    b.Property<Guid>("RoleId");

                    b.Property<string>("RoleDescription");

                    b.Property<string>("RoleDisplayName");

                    b.Property<string>("RoleName");

                    b.Property<bool>("RoleState");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique()
                        .HasFilter("([RoleName] IS NOT NULL)");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("c8e8463f-f460-4ae9-a8fb-8eaaabc81b1b"),
                            RoleDescription = "Total Control Default Groupe",
                            RoleDisplayName = "Total Control",
                            RoleName = "TotalControl",
                            RoleState = true
                        },
                        new
                        {
                            RoleId = new Guid("e2418633-f452-4877-807c-fbc1bd58de6c"),
                            RoleDescription = "Design Groupe Default Groupe",
                            RoleDisplayName = "Design Groupe",
                            RoleName = "Design",
                            RoleState = true
                        },
                        new
                        {
                            RoleId = new Guid("eef95016-fae3-4832-ad95-0011407d0944"),
                            RoleDescription = "Editors Groupe Default Groupe",
                            RoleDisplayName = "Editors Groupe",
                            RoleName = "Editors",
                            RoleState = true
                        },
                        new
                        {
                            RoleId = new Guid("224ef755-1794-4629-bdd2-fcb1d9ea00bc"),
                            RoleDescription = "Collaboration Default Groupe",
                            RoleDisplayName = "Collaboration Groupe",
                            RoleName = "Collaboration",
                            RoleState = true
                        },
                        new
                        {
                            RoleId = new Guid("4d6d732f-909d-4ebe-b98a-71f6dc074d6e"),
                            RoleDescription = "Readers Groupe Default Groupe",
                            RoleDisplayName = "Readers Groupe",
                            RoleName = "Readers",
                            RoleState = true
                        },
                        new
                        {
                            RoleId = new Guid("4e4f22c1-fd30-469b-ac5d-b22725619cac"),
                            RoleDescription = "Limited Access Default Groupe",
                            RoleDisplayName = "Limited Access",
                            RoleName = "LimitedAccess",
                            RoleState = true
                        },
                        new
                        {
                            RoleId = new Guid("aaa6e1a0-8534-4ec2-b9b3-f09df832df30"),
                            RoleDescription = "Display Only Default Groupe",
                            RoleDisplayName = "Display Only Groupe",
                            RoleName = "DisplayOnly",
                            RoleState = true
                        },
                        new
                        {
                            RoleId = new Guid("efebdd55-5a1b-492e-b736-9062340a9fbc"),
                            RoleDescription = "Approval Default Groupe",
                            RoleDisplayName = "Approval Groupe",
                            RoleName = "Approval",
                            RoleState = true
                        },
                        new
                        {
                            RoleId = new Guid("68d62329-3713-4ef4-b6f4-d2c2355aeca1"),
                            RoleDescription = "Restricted reading Default Groupe",
                            RoleDisplayName = "Restricted reading Groupe",
                            RoleName = "Restricted reading",
                            RoleState = true
                        });
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Users", b =>
                {
                    b.Property<Guid>("UsersId");

                    b.Property<Guid?>("FilialeID");

                    b.Property<Guid?>("FkUsersId");

                    b.Property<DateTime>("UsersBirthDate");

                    b.Property<string>("UsersCode")
                        .HasMaxLength(8);

                    b.Property<DateTime>("UsersDateLeave");

                    b.Property<string>("UsersGenderCode");

                    b.Property<DateTime>("UsersJoinDate");

                    b.Property<string>("UsersLastName")
                        .HasMaxLength(50);

                    b.Property<string>("UsersMail")
                        .HasMaxLength(80);

                    b.Property<string>("UsersMailIntern")
                        .HasMaxLength(80);

                    b.Property<string>("UsersName")
                        .HasMaxLength(50);

                    b.Property<string>("UsersPersonalNumber");

                    b.Property<string>("UsersPhoneNumber");

                    b.Property<string>("UsersPosteName");

                    b.Property<bool>("UsersState");

                    b.HasKey("UsersId");

                    b.HasIndex("FilialeID");

                    b.HasIndex("FkUsersId");

                    b.HasIndex("UsersCode")
                        .IsUnique()
                        .HasFilter("([UsersCode] IS NOT NULL)");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UsersId = new Guid("9a55047d-13cc-4c6b-82eb-6d4e740a4f9f"),
                            UsersBirthDate = new DateTime(2019, 10, 31, 10, 43, 0, 306, DateTimeKind.Local).AddTicks(9671),
                            UsersCode = "00000000",
                            UsersDateLeave = new DateTime(2019, 10, 31, 10, 43, 0, 307, DateTimeKind.Local).AddTicks(7133),
                            UsersGenderCode = "M",
                            UsersJoinDate = new DateTime(2019, 10, 31, 10, 43, 0, 307, DateTimeKind.Local).AddTicks(7750),
                            UsersLastName = "Admin",
                            UsersMail = "Admin@poulina.com",
                            UsersMailIntern = "Admin@poulina.com",
                            UsersName = "Admin",
                            UsersPersonalNumber = "63524163",
                            UsersPhoneNumber = "63524141",
                            UsersPosteName = "Admin Poste",
                            UsersState = false
                        },
                        new
                        {
                            UsersId = new Guid("ca10e515-0486-487b-84f2-46571ace4542"),
                            UsersBirthDate = new DateTime(2019, 10, 31, 10, 43, 0, 308, DateTimeKind.Local).AddTicks(2479),
                            UsersCode = "00000001",
                            UsersDateLeave = new DateTime(2019, 10, 31, 10, 43, 0, 308, DateTimeKind.Local).AddTicks(2486),
                            UsersGenderCode = "M",
                            UsersJoinDate = new DateTime(2019, 10, 31, 10, 43, 0, 308, DateTimeKind.Local).AddTicks(2491),
                            UsersLastName = "SupAdmin",
                            UsersMail = "SupAdmin@poulina.com",
                            UsersMailIntern = "SupAdmin@poulina.com",
                            UsersName = "SupAdmin",
                            UsersPersonalNumber = "63524163",
                            UsersPhoneNumber = "63524141",
                            UsersPosteName = "SupAdmin Poste",
                            UsersState = false
                        },
                        new
                        {
                            UsersId = new Guid("99dfeff6-d3c4-4199-bc4b-b5e23bc23d11"),
                            UsersBirthDate = new DateTime(2019, 10, 31, 10, 43, 0, 308, DateTimeKind.Local).AddTicks(2522),
                            UsersCode = "00000002",
                            UsersDateLeave = new DateTime(2019, 10, 31, 10, 43, 0, 308, DateTimeKind.Local).AddTicks(2523),
                            UsersGenderCode = "M",
                            UsersJoinDate = new DateTime(2019, 10, 31, 10, 43, 0, 308, DateTimeKind.Local).AddTicks(2524),
                            UsersLastName = "Test",
                            UsersMail = "User1@poulina.com",
                            UsersMailIntern = "User1@poulina.com",
                            UsersName = "User1",
                            UsersPersonalNumber = "63524163",
                            UsersPhoneNumber = "63524141",
                            UsersPosteName = "User1 Poste",
                            UsersState = false
                        },
                        new
                        {
                            UsersId = new Guid("2010c4f6-fa7d-422c-ba73-fc47009f4f8c"),
                            UsersBirthDate = new DateTime(2019, 10, 31, 10, 43, 0, 308, DateTimeKind.Local).AddTicks(2527),
                            UsersCode = "00000003",
                            UsersDateLeave = new DateTime(2019, 10, 31, 10, 43, 0, 308, DateTimeKind.Local).AddTicks(2528),
                            UsersGenderCode = "M",
                            UsersJoinDate = new DateTime(2019, 10, 31, 10, 43, 0, 308, DateTimeKind.Local).AddTicks(2529),
                            UsersLastName = "Test",
                            UsersMail = "User2@poulina.com",
                            UsersMailIntern = "User2@poulina.com",
                            UsersName = "User2",
                            UsersPersonalNumber = "63524163",
                            UsersPhoneNumber = "63524141",
                            UsersPosteName = "User2 Poste",
                            UsersState = false
                        });
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffApplicationUsers", b =>
                {
                    b.HasOne("Pgh.Auth.Model.Models.Applications", "App")
                        .WithMany("AffApplicationUsers")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pgh.Auth.Model.Models.Users", "Users")
                        .WithMany("AffApplicationUsers")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffGroupUsers", b =>
                {
                    b.HasOne("Pgh.Auth.Model.Models.Groupes", "Grp")
                        .WithMany("AffGroupUsers")
                        .HasForeignKey("GrpId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pgh.Auth.Model.Models.Users", "Users")
                        .WithMany("AffGroupUsers")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffRoleGroupMenus", b =>
                {
                    b.HasOne("Pgh.Auth.Model.Models.Groupes", "Groupe")
                        .WithMany("AffRoleGroupMenus")
                        .HasForeignKey("GrpId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pgh.Auth.Model.Models.Menus", "Menu")
                        .WithMany("AffRoleGroupMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pgh.Auth.Model.Models.Roles", "Role")
                        .WithMany("AffRoleGroupMenus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffRolePermissions", b =>
                {
                    b.HasOne("Pgh.Auth.Model.Models.Permissions", "Permission")
                        .WithMany("AffRolePermissions")
                        .HasForeignKey("PermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pgh.Auth.Model.Models.Roles", "Role")
                        .WithMany("AffRolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.AffRolesUsersMenus", b =>
                {
                    b.HasOne("Pgh.Auth.Model.Models.Menus", "Menu")
                        .WithMany("AffRolesUsersMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pgh.Auth.Model.Models.Roles", "Role")
                        .WithMany("AffRolesUsersMenus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pgh.Auth.Model.Models.Users", "Users")
                        .WithMany("AffRolesUsersMenus")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Groupes", b =>
                {
                    b.HasOne("Pgh.Auth.Model.Models.Applications", "FkApp")
                        .WithMany("Groupes")
                        .HasForeignKey("FkAppId")
                        .HasConstraintName("FK_Groupes_Applications")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Menus", b =>
                {
                    b.HasOne("Pgh.Auth.Model.Models.Applications", "FkApp")
                        .WithMany("Menus")
                        .HasForeignKey("FkAppId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Pgh.Auth.Model.Models.Menus", "FkMenu")
                        .WithMany("InverseFkMenu")
                        .HasForeignKey("FkMenuId");
                });

            modelBuilder.Entity("Pgh.Auth.Model.Models.Users", b =>
                {
                    b.HasOne("Pgh.Auth.Model.Models.Filiale")
                        .WithMany("Users")
                        .HasForeignKey("FilialeID");

                    b.HasOne("Pgh.Auth.Model.Models.Users", "FkUsers")
                        .WithMany("InverseFkUsers")
                        .HasForeignKey("FkUsersId");
                });
#pragma warning restore 612, 618
        }
    }
}
